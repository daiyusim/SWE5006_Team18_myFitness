name: Build CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-react:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm i
        working-directory: myFitness/ClientApp
      - run: npm run build --if-present
        working-directory: myFitness/ClientApp
        env:
          CI: false

  build-dotnet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build myFitness.sln --no-restore

  test-dotnet:
    runs-on: ubuntu-latest
    needs: [build-react, build-dotnet]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Unit test
        run: dotnet test

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-react, build-dotnet]

    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_REPOSITORY_NAME }} -f ./myFitness/dockerfile .
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_REPOSITORY_NAME }}

  build-container:
    runs-on: ubuntu-latest
    needs: [build-docker]

    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_REPOSITORY_NAME }}
      - name: Build Docker container
        run: docker run -d --name myfitnessapp -p 4000:5050 ${{ secrets.DOCKER_REPOSITORY_NAME }}
  aws-login:
    runs-on: ubuntu-latest
    needs: [build-docker,build-container]
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
        AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start EC2 instance
        run: aws ec2 start-instances --instance-ids i-05196afce046ef6b7

      - name: Wait for instance to start
        run: aws ec2 wait instance-running --instance-ids i-05196afce046ef6b7

      - name: Get Public IPv4 address associated with instance
        id: get-public-ipv4
        run: |
          public_ipv4=$(aws ec2 describe-instances --instance-ids i-05196afce046ef6b7 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=public_ipv4::$public_ipv4"

      - name: Get Elastic IP address associated with instance
        id: get-elastic-ip
        run: |
          elastic_ip=$(aws ec2 describe-instances --instance-ids i-05196afce046ef6b7 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=elastic_ip::$elastic_ip"
      - name: Pull docker image
        run: docker pull ${{ secrets.DOCKER_REPOSITORY_NAME }}
      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_REPOSITORY_NAME }} ${{ steps.get-public-ipv4.outputs.public_ipv4 }}/myfitness

      - name: Save Docker image
        run: docker save -o myfitness.tar ${{ steps.get-public-ipv4.outputs.public_ipv4 }}/myfitness
      - name: Set permissions for private key
        run: chmod 600 myFitness/ClientApp/myfitness.pem

      - name: Transfer Docker image to EC2
        run: |
             scp -o StrictHostKeyChecking=no -i myFitness/ClientApp/myfitness.pem myfitness.tar ec2-user@${{ steps.get-elastic-ip.outputs.elastic_ip }}:/home/ec2-user/
  build-ec2:
    runs-on: ubuntu-latest
    needs: [aws-login]
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
        AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - name: Get Public IPv4 address associated with instance
        id: get-public-ipv4
        run: |
          public_ipv4=$(aws ec2 describe-instances --instance-ids i-05196afce046ef6b7 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=public_ipv4::$public_ipv4"

      - name: Get Elastic IP address associated with instance
        id: get-elastic-ip
        run: |
          elastic_ip=$(aws ec2 describe-instances --instance-ids i-05196afce046ef6b7 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=elastic_ip::$elastic_ip"
      - name: SSH into EC2 and load Docker image
        run: |
            ssh -i myFitness/ClientApp/myfitness.pem ec2-user@${{ steps.get-elastic-ip.outputs.elastic_ip }} \
              'cd /home/ec2-user && \
              ls && \
              sudo docker load -i myfitness.tar && \
              sudo docker run -d -p 5050:5050 ${{ steps.get-public-ipv4.outputs.public_ipv4 }}/myfitness'

      - name: Stop Docker container
        run: docker stop $(docker ps -aq)

      - name: Stop EC2 instance
        run: aws ec2 stop-instances --instance-ids i-05196afce046ef6b7
