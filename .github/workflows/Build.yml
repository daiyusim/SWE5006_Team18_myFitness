name: Build CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-react:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
        working-directory: myFitness/ClientApp
      - run: npm run build --if-present
        working-directory: myFitness/ClientApp
        env:
          CI: false

  build-dotnet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build myFitness.sln --no-restore

  test-dotnet:
    runs-on: ubuntu-latest
    needs: [build-react, build-dotnet]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet test

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-react, build-dotnet]
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker build -t ${{ secrets.DOCKER_REPOSITORY_NAME }}:latest -f ./myFitness/Dockerfile .
      - run: docker push ${{ secrets.DOCKER_REPOSITORY_NAME }}:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-docker
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - uses: actions/checkout@v2

      - name: Start EC2 instance
        run: aws ec2 start-instances --instance-ids i-05196afce046ef6b7

      - name: Wait for instance to start
        run: aws ec2 wait instance-running --instance-ids i-05196afce046ef6b7

      - name: Get Elastic IP address associated with instance
        id: get-elastic-ip
        run: |
          elastic_ip=$(aws ec2 describe-instances --instance-ids i-05196afce046ef6b7 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=elastic_ip::$elastic_ip"

      - name: Save Docker image to file
        run: docker save ${{ secrets.DOCKER_REPOSITORY_NAME }}:latest -o myfitness.tar

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.MYFITNESS_PEM }}" | base64 --decode > myfitness.pem
          chmod 400 myfitness.pem

      - name: Copy Docker image to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i myfitness.pem myfitness.tar ec2-user@${{ steps.get-elastic-ip.outputs.elastic_ip }}:/home/ec2-user/
          echo "Docker image successfully copied to EC2."

      - name: Load and run Docker container
        run: |
          ssh -o StrictHostKeyChecking=no -i myfitness.pem ec2-user@${{ steps.get-elastic-ip.outputs.elastic_ip }} "docker load -i myfitness.tar && docker run -d -p 4000:5050 ${{ secrets.DOCKER_REPOSITORY_NAME }}:latest"
          echo "Docker container started."

      - name: Cleanup
        run: |
          docker system prune -af
          echo "Docker cleanup done."

  cleanup-ec2:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    steps:
      - name: Stop EC2 instance
        run: aws ec2 stop-instances --instance-ids i-05196afce046ef6b7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETKEY }}
          AWS_DEFAULT_REGION: ap-southeast-1
